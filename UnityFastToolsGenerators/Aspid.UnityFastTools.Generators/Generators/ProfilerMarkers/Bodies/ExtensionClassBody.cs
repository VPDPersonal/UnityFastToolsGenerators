using System.Linq;
using Microsoft.CodeAnalysis;
using Aspid.Generators.Helper;
using System.Collections.Immutable;
using UnityFastToolsGenerators.Generators.ProfilerMarkers.Data;
using static Aspid.Generators.Helper.Classes;
using static Aspid.Generators.Helper.Unity.UnityClasses;
using static UnityFastToolsGenerators.Descriptions.General;

namespace UnityFastToolsGenerators.Generators.ProfilerMarkers.Bodies;

public static class ExtensionClassBody
{
    public static void GenerateCode(in SourceProductionContext context, in ImmutableArray<MarkerCall> markerCalls)
    {
        var markerCallTypes = markerCalls
            .GroupBy(markerCall => markerCall.NamedTypeSymbol, SymbolEqualityComparer.Default)
            .Select(group => new MarkerCallType(group.Key!, group.ToImmutableArray()));

        foreach (var markerCallType in markerCallTypes)
            GenerateCode(context, markerCallType);
    }

    private static void GenerateCode(in SourceProductionContext context, in MarkerCallType type)
    {
        var symbol = type.Symbol;
        var typeName = symbol.Name;

        var hasNamespaceName = !symbol.ContainingNamespace.IsGlobalNamespace;
        var namespaceName = hasNamespaceName ? symbol.ContainingNamespace.ToDisplayString() : null;
        
        var markerCallMembers = type.MarkerCalls
            .GroupBy(markerCall => markerCall.MethodSymbol, SymbolEqualityComparer.Default)
            .Select(grouping => new MarkerCallMember((IMethodSymbol)grouping.Key!, grouping.ToImmutableArray()))
            .ToImmutableArray();

        var className = $"__{typeName}ProfilerMarkerExtensions";

        var code = new CodeWriter()
            .AppendLine("// <auto-generated>")
            .AppendLine()
            .AppendLineIf(hasNamespaceName, $"namespace {namespaceName}")
            .BeginBlockIf(hasNamespaceName)
            .AppendLine($"[{ProfilerMarkerGeneratedCode}]")
            .AppendLine($"internal static class {className}")
            .BeginBlock()
            .AppendProfilerMarkers(markerCallMembers)
            .AppendWithoutMessage(symbol, markerCallMembers)
            .EndBlock()
            .EndBlockIf(hasNamespaceName);
        
        var hintName = $"{className}.g.cs";
        context.AddSource(hintName, code.GetSourceText());
    }

    private static CodeWriter AppendProfilerMarkers(this CodeWriter code, ImmutableArray<MarkerCallMember> markerCallMembers)
    {
        foreach (var markerCallMember in markerCallMembers)
        {
            var orderedMarkerCalls = markerCallMember.MarkerCalls
                .OrderBy(markerCall => markerCall.Line);

            foreach (var markerCall in orderedMarkerCalls)
            {
                code.AppendMultiline(
                    $"""
                    [{ProfilerMarkerGeneratedCode}]
                    private static readonly {ProfilerMarker} {markerCall.MarkerName} = new("{markerCall.MarkerValue}");
                    
                    """);
            }
        }

        return code;
    }

    private static CodeWriter AppendWithoutMessage(
        this CodeWriter code,
        ISymbol symbol,
        ImmutableArray<MarkerCallMember> markerCallMembers)
    {
        code.AppendLine($"[{ProfilerMarkerGeneratedCode}]")
            .AppendLine($"public static {ProfilerMarker}.AutoScope Marker(this {symbol.ToDisplayStringGlobal()} _, [{CallerLineNumberAttribute}] int line = -1)")
            .BeginBlock();

        foreach (var markerCall in markerCallMembers.SelectMany(member => member.MarkerCalls))
        {
            code.AppendLine($"if (line is {markerCall.Line}) return {markerCall.MarkerName}.Auto();");
        }
        
        code.AppendLine()
            .AppendLine($"throw new {Exception}();")
            .EndBlock();

        return code;
    }
}